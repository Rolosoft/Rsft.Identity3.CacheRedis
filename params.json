{
  "name": "Rsft.Identity3.Cacheredis",
  "tagline": "Redis Caching for Client, Scope and Claims stores.",
  "body": "# Redis Cache For Identity Server 3\r\n\r\n[![rolosoft_public_packages MyGet Build Status](https://www.myget.org/BuildSource/Badge/rolosoft_public_packages?identifier=a53e1b7a-1d56-43f7-8e0e-a518e82c8cb5)](https://www.myget.org/)\r\n\r\n## About\r\nA library that delivers a Redis based implementation of Identity Server 3 extension points for:\r\n\r\n* ```ICache<Client>```\r\n* ```ICache<IEnumerable<Scope>>```\r\n* ```ICache<IEnumerable<Claim>>```\r\n\r\n## Why do I care?\r\nIdentity Server 3 default implementations for Client, Scope and Claim persistence are volatile in-memory stores. This is no problem for single server solutions. However, in load balanced environments, the default in-memory stores fail.\r\n\r\nIn such shared server scenarios, a central persistence store is required. Redis offers a perfect solution.\r\n\r\n## Features and Benefits\r\n* Thread safe, high performance implementation\r\n* Extensive async logging built in using [SLAB](https://msdn.microsoft.com/en-us/library/dn440729(v=pandp.60).aspx)\r\n* Built in compression (can be disabled if required)\r\n* Optional configuration over-rides for cache duration, cache prefix and compression options\r\n\r\n## Installation\r\nFrom Nuget\r\n~~~\r\ninstall-package Rsft.Identity3.CacheRedis\r\n~~~\r\n\r\n## Quick Start\r\nSee unit / integration tests for full examples. A default setup might look like this:\r\n\r\n```csharp\r\n/*Create a singleton instance of our Redis integration extension */\r\nvar caches = RedisCacheFactory.Create(RedisConnectionString);\r\n\r\n/*Assign caches to vars for ease of single-step debugging / inspection etc.*/\r\nvar clientCache = caches.ClientCache;\r\nvar scopesCache = caches.ScopesCache;\r\nvar userServiceCache = caches.UserServiceCache;\r\n\r\n/*Create Identity Server 3 with default, in memory persistence stores. NOTE: persistence stores will be your SQL, EF or storage production stores or whatever*/\r\nvar identityServerServiceFactory = new IdentityServerServiceFactory().UseInMemoryClients(new List<Client>()).UseInMemoryScopes(new List<Scope>()).UseInMemoryUsers(new List<InMemoryUser>());\r\n\r\n/*Add the Redis cache stores as extension objects into Identity Server 3*/\r\nidentityServerServiceFactory.ConfigureClientStoreCache(new Registration<ICache<Client>>(clientCache));\r\nidentityServerServiceFactory.ConfigureScopeStoreCache(new Registration<ICache<IEnumerable<Scope>>>(scopesCache));\r\nidentityServerServiceFactory.ConfigureUserServiceCache(new Registration<ICache<IEnumerable<Claim>>>(userServiceCache));\r\n```\r\n\r\n## Advanced Topics\r\n\r\n### Connection Multiplexer\r\nA Redis ConnectionMultiplexer or connection string is required to create a connection to Redis.\r\n\r\nThere are 3 ways of doing this:\r\n\r\n1) Pass in a connection string\r\ne.g.\r\n```csharp\r\nvar caches RedisCacheFactory.Create(\"<your connection string>\");\r\n```\r\n\r\n2) Pass in an existing Connection Multiplexer\r\ne.g.\r\n```csharp\r\nvar caches RedisCacheFactory.Create(MyConnectionMultiplexer);\r\n```\r\n__Note:__ If you are creating a Connection Multiplexer yourself, be sure to ensure that it is a singleton instance as per recommendations described [here](https://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/Basics.md)\r\n\r\n3) Connection string\r\nIn App.config or Web.config, ConnectionString or value named ```'Rsft:Identity3:CacheConnectionString'```\r\n\r\nWe use Azure CloudConfigurationManager wo ensure that configuration options are as diverse as possible for Azure hosting options (e.g Cloud service, Web etc)\r\n\r\ne.g.\r\n__Web.config__ or __App.config__\r\n```xml\r\n<appSettings>\r\n    <add key=\"Rsft:Identity3:CacheConnectionString\" value=\"MyConnectionString\"/>\r\n</appSettings>\r\n```\r\n\r\ne.g.\r\n__*.cscfg__\r\n```xml\r\n<ConfigurationSettings>\r\n  <Setting name=\"Rsft:Identity3:CacheConnectionString\" value=\"MyConnectionString\" />\r\n</ConfigurationSettings>\r\n```\r\n\r\n### Configuration\r\nCustomize configuration by passing in an optional ```IConfiguration<RedisCacheConfigurationEntity>``` to the ```RedisCacheFactory.Create(..)``` method.\r\n\r\nConfiguration options are:\r\n\r\n|Option Name               | Description                                 | Default      |\r\n|--------------------------|---------------------------------------------|--------------|\r\n| CacheDuration            | Duration of cache (in seconds)              | 3600         |\r\n| RedisCacheDefaultPrefix  | Prefix of keys to store in cache            | rsftid3cache |\r\n| UseObjectCompression     | Use compression to store objects in Redis ? | true         |\r\n\r\n### Logging\r\nExtensive async logging is built in using [SLAB](https://msdn.microsoft.com/en-us/library/dn440729(v=pandp.60).aspx).\r\n\r\nThere are two logs:\r\n* __Exception__ - Add listener(s) for ```ExceptionLoggingEventSource.Log```\r\n* __Activity__ - Add listener(s) for ```ActivityLoggingEventSource.Log```\r\n \r\nExample of Creating Console Listener for Exception Logging.\r\n```csharp\r\nvar observableEventListener = new ObservableEventListener();\r\nobservableEventListener.EnableEvents(ExceptionLoggingEventSource.Log, EventLevel.LogAlways);\r\nobservableEventListener.LogToConsole();\r\n```\r\n\r\nSee unit tests in source code for more examples of logging verbosity options and filters.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}